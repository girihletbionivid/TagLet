/*
 * This Script is written by 'Nitin' 
*/

var counterForSampleName = 1;
var flagForChildDiv = false;
var flagForNewDivCreation = false;

var arrayForDiv = [];
var arrIndex = 0;
var callCounter = 1;

function addMoreSamples()
{
	if (arrayForDiv.length > 0) 
	{
		for (var i = 0; i < arrayForDiv.length; i++) 
		{
			if (!validateNewCreatedDivElements(arrayForDiv[i])) 
			{
				alert("Fill the mandatory fields\nbefore adding new samples...!!");
				return false;
			} 
			else 
			{
				getFilesForNewCreatedDiv();
				changeFunctionAttributesForDynamicDiv( arrayForDiv[arrIndex - 1] )
				arrOfFileList[arrIndex] = listOfFile;
			}
		}
	}
	else 
	{
		if (!validateOldDivElements()) 
		{
			alert("Fill the mandatory fields\nbefore adding new sample...!!");
			return false;
		} 
		else 
		{
			getFilesForSingleSample();
			changeFunctionAttributesForStaticDiv();
			arrOfFileList[arrIndex] = listOfFile;
		}
	}
	
	if(document.getElementById("idSequencingType").value == "illumina")
	{
		arrayForDiv.push(callCounter);
	
		var targetIdForOnchange = "selectSingleFileFormGroup" + arrayForDiv[arrIndex];
			var node = document.createElement('div');
			var testDiv = "idSingleFileSelect" + arrayForDiv[arrIndex];
			String(testDiv);
			var testExtension = "txt";
			String(testExtension);
			
			node.id = 'childDiv' + arrayForDiv[arrIndex];
			node.className = "fragment";

//						Sample Name
			
			node.innerHTML = '<span class="bgColorForCloseButton" onclick="removeNewlyCreatedDiv(this.parentNode); return false;">CLOSE</span>'
						   + '<div class="form-group">'
						   + '<label class="control-label col-sm-4  col-lg-4 test textClass required">'
						   + 'Sample Name:'
						   + '</label>'
						   + '<div class="col-sm-6 col-lg-6" id="idSampleNm' + arrayForDiv[arrIndex] + '">'
						   + '<input class="form-control" type="text" id="idSampleName454Qc' + arrayForDiv[arrIndex] + '" placeholder="Sample Name'
						   + '" onblur="warningForEmptyField(this.id, this.parentNode.id)"></input>'
						   + '</div>'
						   + '</div>'
						   
						   + '<div class="form-group" id="endSelectionDiv' + arrayForDiv[arrIndex] + '">'
						   + '<label class="control-label col-sm-4  col-lg-4 test textClass">'
						   + '<span class=" glyphicon glyphicon-question-sign iconSmallClass textClass"' 
						   + 'data-placement="left" data-toggle="tooltip"'
						   + 'title="Read layout whether paired end reads or single end reads.">'
						   + '</span>'
						   + '&nbsp;&nbsp;Sequencing Read Layout:'
						   + '</label>'
						   + '<div class="col-sm-6 col-lg-6">'
						   + '<select class="form-control" id="idTypeOfOutputSelectIllumina' + arrayForDiv[arrIndex] + '">'
						   + '<option value="Paired End" selected="selected">Paired</option>'
						   + '<option value="Single End">Single</option>'
						   + '</select>'
						   + '</div>'
						   + '</div>'
			
						   + '<div class="form-group" id="selectpOutputDirectoryGroupIllumina' + arrayForDiv[arrIndex] + '">'
						   + '<label class="control-label col-sm-4  col-lg-4 textClass test required"'
						   + 'for="pwd" id="lableSingleFileSelectIllumina">'
						   + '<span class=" glyphicon glyphicon-question-sign iconSmallClass textClass"' 
						   + 'data-placement="left" data-toggle="tooltip"'
						   + 'title="This folder should contain the files generated by NGSQCToolkit.">'
						   + '</span>'
						   + '&nbsp;&nbsp;'
						   + 'Select QC Output Folder:'
						   + '</label>'
						   + '<div class="col-sm-6 col-lg-6" id="idSelectOutputFolderDiv' + arrayForDiv[arrIndex] + '">'
						   + '<input type="button" class="col-sm-4  col-lg-4  btn-file "'
						   + 'data-toggle="modal" data-target="#selectFile"'
						   + 'placeholder="Select output Dir file" id="idOutputDirctoryBrowse' + arrayForDiv[arrIndex] + '"'
						   + 'onclick="getAllDirectory(\'idOutputDirctorySelectIllumina' + arrayForDiv[arrIndex] +'\',\'diretory\');"'
						   + 'accept=".fa" value="BROWSE..."></input>'
						   + '<div id="idOutputDirctorySelectIllumina' + arrayForDiv[arrIndex] + '" class="col-sm-6 col-lg-6 text-left">No folder selected</div>'
						   + '</div>'
						   + '</div>'
							
						   + '</div>';
			
		// Add more sample button	
			
			var myDivClasses = document.getElementById('cloneDiv').classList;
			if(document.getElementById("addMoreSampleDiv") != null)
			{
				var element = document.getElementById("addMoreSampleDiv");
				element.parentNode.removeChild(element);
			}
			
			var AddSamplenode = document.createElement('div');
			AddSamplenode.id = 'addMoreSampleDiv';
			AddSamplenode.innerHTML = '<div class="form-group" id="addMoreSampleDiv">'
							+ '<label class="control-label col-sm-4  col-lg-4 test textClass"></label>'
							+ '<div class="col-sm-6 col-lg-6">'
							+ '<a class="btn btn-default bgColorForButton" onclick="addMoreSamples();">+ Add More Samples</a>'
							+ '</div>'
							+ '</div>'
							
			document.getElementById("cloneDiv").appendChild(node);
			document.getElementById("cloneDiv").appendChild(AddSamplenode);
			
			callCounter = callCounter + 1;
			arrIndex = arrIndex + 1;
	}
	else
	{
		arrayForDiv.push(callCounter);
		
		var targetIdForOnchange = "selectSingleFileFormGroup" + arrayForDiv[arrIndex];
			var node = document.createElement('div');
			var testDiv = "idSingleFileSelect" + arrayForDiv[arrIndex];
			String(testDiv);
			var testExtension = "txt";
			String(testExtension);
			
			node.id = 'childDiv' + arrayForDiv[arrIndex];
			node.className = "fragment";

//						Sample Name
			
			node.innerHTML = '<span class="bgColorForCloseButton" onclick="removeNewlyCreatedDiv(this.parentNode); return false;">CLOSE</span>'
						   + '<div class="form-group">'
						   + '<label class="control-label col-sm-4  col-lg-4 test textClass required">'
						   + 'Sample Name:'
						   + '</label>'
						   + '<div class="col-sm-6 col-lg-6" id="idSampleNm' + arrayForDiv[arrIndex] + '">'
						   + '<input class="form-control" type="text" id="idSampleName454Qc' + arrayForDiv[arrIndex] + '" placeholder="Sample Name'
						   + '" onblur="warningForEmptyField(this.id, this.parentNode.id)"></input>'
						   + '</div>'
						   + '</div>'
						   
						  /* + '<div class="form-group" id="endSelectionDiv' + arrayForDiv[arrIndex] + '">'
						   + '<label class="control-label col-sm-4  col-lg-4 test textClass"> Output Type: </label>'
						   + '<div class="col-sm-6 col-lg-6">'
						   + '<select class="form-control" id="idTypeOfOutputSelectIllumina' + arrayForDiv[arrIndex] + '">'
						   + '<option value="Paired End" selected="selected">Paired</option>'
						   + '<option value="Single End">Single</option>'
						   + '</select>'
						   + '</div>'
						   + '</div>'
						  */
			
						   + '<div class="form-group" id="selectpOutputDirectoryGroupIllumina' + arrayForDiv[arrIndex] + '">'
						   + '<label class="control-label col-sm-4  col-lg-4 textClass test required"'
						   + 'for="pwd" id="lableSingleFileSelectIllumina">'
						   + '<span class=" glyphicon glyphicon-question-sign iconSmallClass textClass"' 
						   + 'data-placement="left" data-toggle="tooltip"'
						   + 'title="This folder should contain the files generated by NGSQCToolkit.">'
						   + '</span>'
						   + '&nbsp;&nbsp;'
						   + 'Select QC Output Folder:'
						   + '</label>'
						   + '<div class="col-sm-6 col-lg-6"id="idSelectOutputFolderDiv' + arrayForDiv[arrIndex] + '">'
						   + '<input type="button" class="col-sm-4  col-lg-4  btn-file "'
						   + 'data-toggle="modal" data-target="#selectFile"'
						   + 'placeholder="Select output Dir file" id="idOutputDirctoryBrowse' + arrayForDiv[arrIndex] + '"'
						   + 'onclick="getAllDirectory(\'idOutputDirctorySelectIllumina' + arrayForDiv[arrIndex] + '\',\'diretory\');"'
						   + 'accept=".fa" value="BROWSE..."></input>'
						   + '<div id="idOutputDirctorySelectIllumina' + arrayForDiv[arrIndex] +'" class="col-sm-6 col-lg-6 text-left">No folder selected</div>'
						   + '</div>'
						   + '</div>'
							
						   + '</div>';
			
// 			Add more sample button	
			
			var myDivClasses = document.getElementById('cloneDiv').classList;
			if(document.getElementById("addMoreSampleDiv") != null)
			{
				var element = document.getElementById("addMoreSampleDiv");
				element.parentNode.removeChild(element);
			}
			
			var AddSamplenode = document.createElement('div');
			AddSamplenode.id = 'addMoreSampleDiv';
			AddSamplenode.innerHTML = '<div class="form-group" id="addMoreSampleDiv">'
							+ '<label class="control-label col-sm-4  col-lg-4 test textClass"></label>'
							+ '<div class="col-sm-6 col-lg-6">'
							+ '<a class="btn btn-default bgColorForButton" onclick="addMoreSamples();">+ Add More Samples</a>'
							+ '</div>'
							+ '</div>'
							
			document.getElementById("cloneDiv").appendChild(node);
			document.getElementById("cloneDiv").appendChild(AddSamplenode);
			
			callCounter = callCounter + 1;
			arrIndex = arrIndex + 1;
		}
}


function removeNewlyCreatedDiv(inputElement)
{
	var tempElementId = inputElement.id;
	var tempCallCounter = tempElementId.match(/\d+/);
	var div = document.getElementById(inputElement.id);
	
	if (div)
	{
	    div.parentNode.removeChild(div);
	}
	
	var value = arrayForDiv.splice( arrayForDiv.indexOf( parseInt(tempCallCounter) ), 1 );
	value = arrOfFileList.splice( arrayForDiv.indexOf( parseInt(tempCallCounter) ), 1 );
	
	arrIndex = arrIndex - 1;
}

function removeAllNewlyCreatedDiv()
{
	for (var int = 0; int < arrayForDiv.length; int++)
	{
		var div = document.getElementById("childDiv" + arrayForDiv[int]);
		if (div)
		{
		    div.parentNode.removeChild(div);
		}
	}
	arrOfFileList = [];
	arrayForDiv = [];
	arrIndex = 0;
	callCounter = 1;
}

function getChildDivIdForFileSelect(parentID)
{
	var children = [].slice.call(document.getElementById(parentID).getElementsByTagName('*'),0);

	var elemnts = new Array(children.length);
	var arrayLength = children.length;
	for (var i = 0; i < arrayLength; i++)
	{
	    var name = children[i].getAttribute("id");    
	    elemnts[i] = name;
	}
	return elemnts[3];
}

//Warning message for the value exceed than Maximum value

function blurFunctionForMaxLimit(IdforDiv, idForParentDiv, MaxVal, defaultValue)
{
	var inputVal = document.getElementById(IdforDiv).value;
	var myDivClasses = document.getElementById(IdforDiv).classList;
	
	if(!inputVal)
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField( idForParentDiv);
		$( '#childDiv' ).show();
	}
	else if( inputVal > MaxVal)
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDiv(MaxVal, idForParentDiv, defaultValue);
		$( '#childDiv' ).show();
	}
	else
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
	}
}

function creatNewDiv(MaxValueForNewDiv, idForParentDivReuiredForNewDiv, defaultValueForNewDiv)
{
	var node = document.createElement('div');
	node.id = 'childDiv';
	node.className = 'alert alert-warning fade in myErrorBorder';
	node.innerHTML = '<a href="#" class="close" data-dismiss="alert">&times;</a>'
					+ '<strong>Warning!</strong> you can not enter the value beyond '
					+ MaxValueForNewDiv
					+ '. Otherwise program will run with default value = '
					+ defaultValueForNewDiv
					+ " ."
					+ '</div>';

	document.getElementById("" + idForParentDivReuiredForNewDiv).appendChild(node);
}

function blurFunctionForMinLimit(IdforDiv, idForParentDiv, MinVal, defaultValue)
{
	var inputVal = document.getElementById(IdforDiv).value;
	var myDivClasses = document.getElementById(IdforDiv).classList;
	
	if(inputVal < MinVal)
	{
		myDivClasses.add("myErrorBorder");
		
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForMinVal(MinVal, idForParentDiv, defaultValue);
		$( '#childDiv' ).show();
	}
	else if(!inputVal)
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField( idForParentDiv);
		$( '#childDiv' ).show();
	}
	else
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		if (myDivClasses.contains("myErrorBorder")) 
		{
			myDivClasses.remove("myErrorBorder");
		}
	}
}

function creatNewDivForMinVal(MinValueForNewDiv, idForParentDivReuiredForNewDiv, defaultValueForNewDiv)
{
	var node = document.createElement('div');
	node.id = 'childDiv';
	node.className = 'alert alert-warning fade in myErrorBorder';
	node.innerHTML = '<a href="#" class="close" data-dismiss="alert">&times;</a>'
					+ '<strong>Warning!</strong> you can not enter the value less than '
					+ MinValueForNewDiv
					+ '. Otherwise program will run with default value = '
					+ defaultValueForNewDiv
					+ " ."
					+ '</div>';

	document.getElementById("" + idForParentDivReuiredForNewDiv).appendChild(node);
}

// Warning for the values exceed than the range

function blurFunctionForMaxAndMinLimit(IdforDiv, idForParentDiv, MaxVal, MinVal, defaultValue)
{
	var inputVal = document.getElementById(IdforDiv).value;
	var myDivClasses = document.getElementById(IdforDiv).classList;
	
	if(inputVal < MinVal || inputVal > MaxVal)
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForRangeValue(MinVal, MaxVal, idForParentDiv, defaultValue);
		$( '#childDiv' ).show();
	}
	else if(!inputVal)
	{
		myDivClasses.add("myErrorBorder");
		
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField( idForParentDiv);
		$( '#childDiv' ).show();
	}
	else
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		if (myDivClasses.contains("myErrorBorder")) 
		{
			myDivClasses.remove("myErrorBorder");
		}
	}
}
function creatNewDivForRangeValue(MinValueForNewDiv, MaxValueForNewDiv, 
									idForParentDivReuiredForNewDiv, defaultValueForNewDiv)
{
	var node = document.createElement('div');
	node.id = 'childDiv';
	node.className = 'alert alert-warning fade in myErrorBorder';
	node.innerHTML = '<a href="#" class="close" data-dismiss="alert">&times;</a>'
					+ '<strong>Warning!</strong> you can not enter the value less than '
					+ MinValueForNewDiv
					+ ' And greater than '
					+ MaxValueForNewDiv
					+ ". Otherwise program will run with default value = "
					+ defaultValueForNewDiv
					+ " ."
					+ '</div>';

	document.getElementById("" + idForParentDivReuiredForNewDiv).appendChild(node);
}

// Warning message for empty Field

function warningForEmptyField(fieldName, idForParentDiv)
{
	var inputVal = document.getElementById(fieldName).value;
	var myDivClasses = document.getElementById(fieldName).classList;
	
	if(inputVal == "")
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField(idForParentDiv);
		$( '#childDiv' ).show();
	}
	else if(!inputVal)
	{
		myDivClasses.add("myErrorBorder");
		
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField( idForParentDiv);
		$( '#childDiv' ).show();
	}
	else
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		if (myDivClasses.contains("myErrorBorder")) 
		{
			myDivClasses.remove("myErrorBorder");
		}	
	}
}

function onblurFunctionOnRecall(fieldName, idForParentDiv, divNumber, indexOfElement) 
{
	var inputVal = document.getElementById(fieldName).value;
	var myDivClasses = document.getElementById(fieldName).classList;

	if (inputVal == "") 
	{
		if (document.getElementById("childDiv") != null) 
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}

		creatNewDivForEmptyField(idForParentDiv);
		$('#childDiv').show();
	}
	else if(!inputVal)
	{
		myDivClasses.add("myErrorBorder");
		
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField( idForParentDiv);
		$( '#childDiv' ).show();
	}
	else 
	{
		if (document.getElementById("childDiv") != null) 
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		if (myDivClasses.contains("myErrorBorder")) 
		{
			myDivClasses.remove("myErrorBorder");
		}
	}
	getFilesForNewCreatedDivOnRecall(divNumber);
	arrOfFileList[divNumber] = listOfFile;
}

function creatNewDivForEmptyField(idForParenDivNewDiv)
{
	var node = document.createElement('div');
	node.id = 'childDiv';
	node.className = 'alert alert-warning fade in myErrorBorder';
	node.innerHTML = '<a href="#" class="close" data-dismiss="alert">&times;</a>'
					+ '<strong>Warning!</strong> you can not left this field empty.'
					+ '</div>';

	document.getElementById("" + idForParenDivNewDiv).appendChild(node);
}

//Warning message for input Files and folders

function warningForFileOrFolders(fieldName, idForParentDiv, value)
{
	var inputVal = document.getElementById(fieldName).innerHTML;
	var myDivClasses = document.getElementById(idForParentDiv).classList;
	
	if(inputVal == value)
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForFileOrFolder(idForParentDiv);
		$( '#childDiv' ).show();
	}
	else if(!inputVal)
	{
		myDivClasses.add("myErrorBorder");
		
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		
		creatNewDivForEmptyField( idForParentDiv);
		$( '#childDiv' ).show();
	}
	else
	{
		if(document.getElementById("childDiv") != null)
		{
			var element = document.getElementById("childDiv");
			element.parentNode.removeChild(element);
		}
		if (myDivClasses.contains("myErrorBorder")) 
		{
			myDivClasses.remove("myErrorBorder");
		}	
	}
}
function creatNewDivForFileOrFolder(idForParenDivNewDiv)
{
	var node = document.createElement('div');
	node.id = 'childDiv';
	node.className = 'alert alert-warning fade in myErrorBorder';
	node.innerHTML = '<a href="#" class="close" data-dismiss="alert">&times;</a>'
					+ '<strong>Warning!</strong> Please select the file/folder.'
					+ '</div>';

	document.getElementById("" + idForParenDivNewDiv).appendChild(node);
}
function removeAddedClass(idForParentDiv)
{
	var myDivClasses = document.getElementById(idForParentDiv).classList;
	if(document.getElementById("childDiv") != null)
	{
		var element = document.getElementById("childDiv");
		element.parentNode.removeChild(element);
	}
	if (myDivClasses.contains("myErrorBorder")) 
	{
		myDivClasses.remove("myErrorBorder");
	}	
}

function changeFunctionAttributesForStaticDiv()
{
	$("#idSampleName454Qc").attr("onblur", "onblurFunctionOnRecall(this.id,'idSampleNm',0,0)");
	
	if(document.getElementById("idSequencingType").value == "illumina")
	{
		$("#idTypeOfOutputSelectIllumina").attr("onchange", "changeLayoutOptions(this,0,1)");
		$("#idOutputDirctoryBrowse").attr("onclick", "getAllDirectoryOnRecall('idOutputDirctorySelectIllumina',0,2);");
	}
	else
	{
		$("#idOutputDirctoryBrowse").attr("onclick", "getAllDirectoryOnRecall('idOutputDirctorySelectIllumina',0,1);");
	}
}

function changeFunctionAttributesForDynamicDiv( inputArrIndex )
{
	$("#idSampleName454Qc" + inputArrIndex).attr("onblur", "onblurFunctionOnRecall(this.id, 'idSampleNm" + inputArrIndex + "'," + inputArrIndex + ",0)");
	
	if(document.getElementById("idSequencingType").value == "illumina")
	{
		$("#idTypeOfOutputSelectIllumina" + inputArrIndex).attr("onchange", "changeLayoutOptions(this," + inputArrIndex + ",1)");
		$("#idOutputDirctoryBrowse" + inputArrIndex).attr("onclick", "getAllDirectoryOnRecall('idOutputDirctorySelectIllumina" + inputArrIndex + "'," + inputArrIndex + ",2);");
	}
	else
	{
		$("#idOutputDirctoryBrowse" + inputArrIndex).attr("onclick", "getAllDirectoryOnRecall('idOutputDirctorySelectIllumina" + inputArrIndex  + "'," + inputArrIndex + ",1);");
	}
}
